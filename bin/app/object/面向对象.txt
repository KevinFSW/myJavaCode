类和对象
    类——抽象笼统的概念，描述一类具有相同特征和行为（方法）的对象 抽象的
    对象——类中衍生出来的一个个体 具体的
    
    人类有名字，年龄，性别   ——属性
        权限修饰符 [特征修饰符] 数据类型 属性的名字 [ = 初始值]

    人类吃饭，说话，学习     ——方法
        权限修饰符 [特征修饰符] 返回值类型 方法名字 (参数列表) [抛出异常] {方法体}

    1，先自己定义一个类（型），创建一个类
    2，利用属性或方法去描述一个类
    3，创建一个当前类的对象、配置属性，让对象做事情

    练习
    1，设计一个方法，用来画星星，倒三角，行数不定，方向不定
    2，交换数组元素
    3，交换数组头尾
    4，找数组极值
    5，在数组中找元素
    6，合并数组
    7，将数组按照最大值位置拆分
    8，去掉数组0元素
    9，用数组存储2到100的素数
    10，数组排序 能配置升序降序
    11，登录认证

	主方法属于虚拟机，不属于任何类
    
	在内存中，真正执行的方法保存在堆内存中，执行时是在栈内存中开辟了一块临时内存空间来执行方法。

    命名规则和规约
    1：规则：
    	字母、数字、符号、中文
    	字母区分大小写
    	数字不能开头
    
    2：规约：
    	类名字  首字母大写，驼峰命名
        属性/方法/变量 首字母小写，驼峰命名
    	构造方法 与类名字一致，类中唯一大写开头的方法
        静态常量 全部大写
    	包名 全部小写	
    
方法重载
    方法名一样，参数列表不一样。
    当传递的参数不存在重载的方法时，可能会发生类型转换，例如：
    public void test(int i){

    }
    test('c');是可以编译执行的，执行的是int i 的重载

    JDK1.5版本后可以重载动态参数列表，本质就是数组，例如：
    public void test(int...x)与public void test(int[] x)不能共存

    动态参数列表只能存在一个，且只能放在参数的最后一个

构造方法：
    作用：只有一个  用来构建当前类的对象，可以用来初始化对象的属性或其他默认操作

    写法：权限修饰符 (没有特征修饰符) 与类名一致的方法名字(参数)[抛出的异常]{
        ......
        //结构上没有返回值，但实际上会返回当前类的对象
    }

    每个类都有构造方法，不写的话会默认有。重写的话，默认的构造方法会被覆盖
    构造方法可以重载，设计时最好把默认的构造方法也写出来
    不能在当前类的方法内调用当前类的构造方法

    构造方法中 属性与变量重名，必须需要一个代替词（this）代替对象
    this:
    指代词，代替的是调用属性/方法的当前的对象，可以调用一般属性、一般方法。
    要用this调用另一个构造方法，只能在构造方法内用this调用（this();），且必须放在方法的第一行
    普通方法之间来回互相调用，写法是没问题的，执行时可能会产生stackoverflowerror栈溢出错误。
    构造方法之间不能来回互相调用，编译就会报错（等继承再讲解）。
   
程序块（代码块）——————理解为一个方法（没有参数，没有返回值，没有名字，没有修饰符）
    写法：
    public class Test{
        //程序块
        {
            ......
        }
    }
    没有重载，一个类中可以存在多个程序块
	每次我们调用构造方法前，系统会调用一次程序块


练习：
    1，模拟计算器加减乘除
    2，设计一个类替代数组可以做的功能，即设计一个类充当一个小容器，可以添加元素，获取元素，删除元素，获取个数







